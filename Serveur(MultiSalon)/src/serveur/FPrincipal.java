/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package serveur;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * <p> FPrincipal est la classe qui créé la fenetre principal où l'ont peut
 * atteindre les différentes fonction du serveur</p>
 *
 * @author J. Bodin et X. Zhang
 * @version 1.0
 */
public class FPrincipal extends javax.swing.JFrame {

    /**
     * Variable de FPrincipal
     *
     * @see Controleur
     * @see FGestionSalons
     * @see TheadSalon
     * @see ServerSocket
     */
    private Controleur controleur;
    private FGestionSalons fGest;
    private TheadSalon ts;
    private ServerSocket socket_ecoute;

    public FPrincipal(Controleur controleur) {
        this.fGest = new FGestionSalons(this, controleur);
        //fGest.init();
        this.setControleur(controleur);
        controleur.setServeurEnLigne(false);
        setBounds(400, 300, 391, 353);
        initComponents();
    }

    /**
     * Retourne le controleur de l'application
     *
     * @return Le controleur
     * @see Controleur
     */
    public Controleur getControleur() {
        return controleur;
    }

    /**
     * Met à jour le controleur
     *
     * @param controleur Le controleur
     * @see Controleur *
     */
    public void setControleur(Controleur controleur) {
        this.controleur = controleur;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemDemarrer = new javax.swing.JMenuItem();
        jMenuItemSnapShot = new javax.swing.JMenuItem();
        jMenuItemStopper = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemQuitter = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemGestionSalons = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serveur Chat");

        jMenu1.setText("Serveur");

        jMenuItemDemarrer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemDemarrer.setText("Démarrer le serveur");
        jMenuItemDemarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDemarrerActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemDemarrer);

        jMenuItemSnapShot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSnapShot.setText("Faire un Snapshot");
        jMenuItemSnapShot.setEnabled(false);
        jMenuItemSnapShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSnapShotActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSnapShot);

        jMenuItemStopper.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemStopper.setText("Stopper le serveur");
        jMenuItemStopper.setEnabled(false);
        jMenuItemStopper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStopperActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemStopper);
        jMenu1.add(jSeparator4);

        jMenuItemQuitter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemQuitter.setText("Quitter");
        jMenuItemQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitterActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQuitter);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Salons");

        jMenuItemGestionSalons.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemGestionSalons.setText("Gestion des salons");
        jMenuItemGestionSalons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGestionSalonsActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemGestionSalons);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemStopperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStopperActionPerformed
        // TODO add your handling code here:
        for (String identSalon : controleur.getSalons().keySet()) {
            controleur.notification(identSalon);
        }
        ts.interrupt();

        try {
            socket_ecoute.close();
        } catch (IOException ex) {
            MessageBox mb = new MessageBox(this, true, "Problème de la fermeture : " + ex.toString());
            mb.setVisible(true);
        }
        try {
            ts.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(FPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        controleur.sauve();
        controleur.setServeurEnLigne(false);
        this.jMenuItemDemarrer.setEnabled(true);
        this.jMenuItemStopper.setEnabled(false);
        this.jMenuItemSnapShot.setEnabled(false);


    }//GEN-LAST:event_jMenuItemStopperActionPerformed

    private void jMenuItemQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitterActionPerformed
        // TODO add your handling code here:
        if (controleur.isServeurEnLigne()) {
            MessageBox mb = new MessageBox(this, true, ("Merci de d'abord stopper le serveur pour bien enregistrer tous les données"));
            mb.setSize(500, 200);
            mb.setVisible(true);
        } else {
            MessageBox mb = new MessageBox(this, true, ("QUITTER ?"));
            mb.setVisible(true);
        }

    }//GEN-LAST:event_jMenuItemQuitterActionPerformed

    private void jMenuItemGestionSalonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGestionSalonsActionPerformed
        // TODO add your handling code here:
        fGest.init();
        if (!controleur.isServeurEnLigne()) {
            MessageBox mb = new MessageBox(fGest, true, "Serveur n'a pas encore démarré, tous les changements vont effectué quand le serveur démarre.");
            mb.setSize(700, 200);
            mb.setVisible(true);
        }
        fGest.setVisible(true);

    }//GEN-LAST:event_jMenuItemGestionSalonsActionPerformed

    private void jMenuItemDemarrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDemarrerActionPerformed
        // TODO add your handling code here:
        try {
            socket_ecoute = controleur.init();
            ts = new TheadSalon(controleur, socket_ecoute);
            ts.start();
            for (String identSalon : controleur.getSalons().keySet()) {
                System.out.println("Le salon " + identSalon + " est lancé.");
            }
            System.out.println("Le serveur est démarré.");

            this.jMenuItemDemarrer.setEnabled(false);
            this.jMenuItemStopper.setEnabled(true);
            this.jMenuItemSnapShot.setEnabled(true);
            controleur.setServeurEnLigne(true);
        } catch (Exception e) {
            MessageBox mb = new MessageBox(this, true, "Problème du démarrage, vérifiez le ficher de sauvegarde SVP");
            mb.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItemDemarrerActionPerformed

    private void jMenuItemSnapShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSnapShotActionPerformed
        // TODO add your handling code here:
        controleur.sauve();
    }//GEN-LAST:event_jMenuItemSnapShotActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemDemarrer;
    private javax.swing.JMenuItem jMenuItemGestionSalons;
    private javax.swing.JMenuItem jMenuItemQuitter;
    private javax.swing.JMenuItem jMenuItemSnapShot;
    private javax.swing.JMenuItem jMenuItemStopper;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
